# What is node.js?
It's an opensource, cross platform runtime environment for executing javascript code, we often use it to build backend services (APIs, application programming interfaces).
It's ideal for creating highly scalable, data intensive and real time apps that powers our client applications (web app (client side, browswer) or mobile app).

# what is the meeaning of runtime environment ?
when we used js code before in the browser, the browser has a "js engine" that act as a runtime envirnment that takes our js code and translate it into machine code (0, 1), such as:
IE uses "Chakra" js engine
Firefox uses "spider monkey"
Chrome uses "V8" => the fastest js engine out there.

# How node.js works ?
The meaning of highly scalable is that it's asyncronous (non blocking) in nature.
and the node applications has something called "single thread" that handles multiple requests at the same time, just as the waiter who takes the order and delivers them to the kitchen and go for serving other customers until the order is ready (not waiting in the kitchen until the order is done, to serve another customer, which this is the meaning of synchronous (blocking code))
There is another concept called "Event queue", node is single threaded as we said, when a request is quering something from a database or any process that may takes time to be done, this thread serves another request until that database returns our asked data "puts a message in the event queue that the node is mointoring in the background", this kind of archtecture makes node ideal for I/O intensive apps (disk and netowrk access), which means serving more clients without the need to upgrade our hardware, and that's also why node isn't good for CPU intensive applicaiton like image manipulaiton, video editing and so on, just good for realtime tasks.

# what is node global object ? "global"
It is same as window object in the browser, you can access/ call any of them anywhere in your node applicaiton, such as
- console.log() == global.console.log()
- setInterval()
- clearInterval()
- setTimeOut()
- clearTimeOut()

# Talk about modules in node !
Every js file in our node applicaiton is considered itself as a module just like the core modules such as OS, http, fs and so on.
The varibles and funcitons that were defined in that file, are scoped to that file/ module, so that's why we call them private varibales/ funcitons/ modules, so if you want to access a variable or a function from certain file from another file in your applicaiton, you need to explicitly export them first (As we said they are private).
Every node application has to have at least one module (app.js / server.js)

# what is NPM (node package manager) ?
It's a tool that helps us to manage the packages used in our node applicaiton

# what is semantic version in node ?
each module has a version, let's say 4.13.5
4 => the major version (increases, if we added a new feature, but makes our app really different than before)
13 => the minor version (increases, if we added a new feature, but it doesn't break our app).
5 => the patch (increases, if we solved a bug (patched))

# what if we want to know the exact version of our node modules used in our app ?
we could go throuht node_modules folder and navigate to our asked module and then to it's packages.json file and see it's version used or we simply could write "npm list" which shows all used modules and their versions and the modules they are depending upon them, if we want only our modules (no what they depend on them) we could write 
"npm list --depth=0"

# what if we want to know the meta data of a certain node package ?
we simply can go to the npm.org and search for it and see it's page, or we could write "npm view package_name" which will give us all the meta data we need if we want certain property we could write "npm view package_name dependencies" and so on.

# What if we want to install a specific version of a package, not the lts ?
we could write "npm i package_name@version"

# what if we want to update our packages?
we first need to know which one is outdated right? "npm outdated", now we update "npm update" but this updates only the minor and the patch version (just for not breaking our app) as we said the main verison has to be different from the older one.
If you want to update the to the lastest version (including the major, minor, patch) "npm-check-update -u " or the shorthand "ncu -u" which updates the packages in our package.json to the really last version, so we need to write "npm i" to downlod them as we just changed the version in package.json without downloading.

# what if we want to uninstall a package ?
"npm uninstall package_name" or simply "npm un package_name"

# note!: we could create our own package and publish it, so any one can use it in his app, just search, it's easy to implement, ya Ahmed!

# What are RESTful APIs (services) ?
It's "Respresentional state transfer

# What are HTTP methods (verbs) ?
- GET => get data
- POST => send data
- PUT => update data
- DELETE => delete data

# What are environment variables ?
They are variables that are part of the enviroment of our app, we can't explicitly define it in the production, as it's provided by the hosting provider environment (e.g. Heroku) such as PORT
- we use them as follows: 
process.env.variable_name_IN_CAPITAL
process.env.NODE_ENV => for environment varibale

#note!: the "api" that found in the url is just a conventnion to tell that's an API, we could remove it from 
"www.example.com/api/blogs" to "api.example.com/blogs", it's doesn't matter!

# note!; "/api/blogs/:id", this id is called parameter and we could access it by "req.params.id"

# note!: we use query paramters to show or require values while query strings "www.example.com/blogs?sortBy=name" to make something optional for user like sorting and so on.

# Good packages
1) joi.js => javascript input validator (It's really cool and powerful)
2) joi-objectid => for validating the mongodb id
3) config => define default parameters for different deployment environment (development, testing, production).
4) debug => for debuging in node.js environment, instead of console.log()

# What are midllware funcitons (midllwares) ?
They are simply a funcitons that take the request object, which either return a response to the client, or passes te controll to another middleware function (request pipline or request chain)
And there many types of middlewares such as: 
- Custom middlewares => we create these functions on our own depending on our need.
like 
// Custom middleware (applied on routes starting with /api/admin)
app.use(‘/api/admin’, function(req, res, next)) {
    // ...
    next();
}
// Custom middleware (applied on all routes)
app.use(function(req, res, next)) {
    // ...
    next();
}
- 3rd party middlewares => as helmet, body-parser and so on, go to express middlewares page.
- built in middlewares => as app.use(express.json()) => which parses the request body with json payload, so we can access it from req.body or app.use(express.urlencoded()) to parse the request body with URL-encoded-payload .
but it's better to use "body-parser" package instead of these buit in middlewares:

// calling body-parser to handle the Request Object from POST requests
const bodyParser = require('body-parser');
// parse application/json, basically parse incoming Request Object as a JSON Object 
app.use(bodyParser.json());
// parse application/x-www-form-urlencoded, basically can only parse incoming Request Object if strings or arrays
app.use(bodyParser.urlencoded({ extended: false }));
// combines the 2 above, then you can parse incoming Request Object if object, with nested objects, or generally any type.
app.use(bodyParser.urlencoded({ extended: true }));
- another built in middleware is the static method:
app.use(express.static('public')); // to access css files images and any public files

# How to enable certain middlewares only in certain stage of development ?
we could only log the http request if th environment is under development by:
if(app.get('env') === 'development) {
    app.use(morgan('tiny'));
}

# Talk about configuration setting in node.js!
There is a package called 'config' that help in this task, read more about it.

# note!: read more about debuging in node.js, instead of writing debuging with console.log()

# Connecting to MongoDB
const mongoose = require(‘mongoose’);
mongoose.connect(‘mongodb://localhost/playground')
.then(() => console.log(‘Connected...’))
.catch(err => console.error(‘Connection failed...’));

- To store objects in MongoDB, we need to define a Mongoose schema first. 
- The schema defines the shape of documents in MongoDB.
const courseSchema = new mongoose.Schema({
name: String,
price: Number
});
- We can use a SchemaType object to provide additional details:
// Using a SchemaType object
const courseSchema = new mong
const courseSchema = new mongoose.Schema({
isPublished: { type: Boolean, default: false }
});

// Creating a model
const Course = mongoose.model(‘Course’, courseSchema);

# Crud operations
// Saving a document
let course = new Course({ name: ‘...’ });
course = await course.save();

// Querying documents
const courses = await Course
    .find({ author: Ahmed, isPublished: true })
    .skip((pageNumber - 1) * pageSize) // It's always used with limit() method in pagination
    .limit(pageSize) // just bring back 10 docs
    .sort({ name: 1, price: -1 }) // 1 means acsending
    .select({ name: 1, price: 1 }); // 1 means return this property back

// Updating a document (query first)
const course = await Course.findById(id);
if (!course) return;
course.set({ name: ‘...’ });
course.save();

// Updating a document (update first)
const result = await Course.update({ _id: id }, {
$set: { name: ‘...’ }
});

// Updating a document (update first) and return it (not the old doc)
const result = await Course.findByIdAndUpdate(
    { _id: id },
    {
        $set: { name: ‘...’ }
    },
    { new: true });

// Removing a document
const result = await Course.deleteOne({ _id: id });
const result = await Course.deleteMany({ _id: id });
const course = await Course.findByIdAndRemove(id);

# Validation in mongoose
We use the buit in validators besides joi package (mix)

# But, what if we wanted to make certain property required only if another property has certain answer ?

const courseSchema = new Mongoose.Schema({
    name: {
        type: String,
        required: true,
        minLength: 5,
        maxLength: 10,
        match: /^pattern$/,
        lowercase: true,
        uppercase: false,
        trim: true
    },
    category: {
        type: String,
        required: true,
        enum: ['web', 'network', 'mobile'] // this means it must have at least one of these categories
        default: 'web'
    }
    tags: [String],// this is the same as the next
    tags: {
        type: Array,
        validate: {
            validator: function(v) { // we use custom validator in case the buit in can't satisify us
            return v && v.length > 0 // this means it'll be valid only if the condition is true
            // sometimes, we need to validate upon the response from a remote service (we can't validate rightnow!), so we can implement an aync validation in our schema as follows:
            isAsync: true,
            validator: function(v, callback) {
                setTimeOut(() => {
                    // do some aync work
                    cosnt result = await fetch......
                    callback(result)
                }, 5000)
        }
        message: 'The course should have at least 1 tag' // message that returns if it was false
        }
        }
    }
    }
    isPublished: true,
    price: {
        type: Number,
        required: funciton() {
            return this.isPublished   // which makes it has required validator only if the isPublished is true.
        },
        min: 3,
        max: 10 // number validators , while those in the top are the string validators,
        // sometimes we need to custom getter and setter of a certain property,
        let's say the user provide us with 15.9 as a price value, and we need it intger not float, right!
        get: value => Math.round(value), // to round it when asked from database
        set: value => Math.round(value)  // to round it before saving it
    }
})

# Built-in validators:
- Strings: minlength, maxlength, match, enum
- Numbers: min, max
- Dates: min, max
- All types: required

// Custom validation
tags: [
    type: Array,
    validate: {
        validator: function(v) { return v && v.length > 0; },
        message: ‘A course should have at least 1 tag.’
    }
]

# If you need to talk to a database or a remote service to perform the validation,
you need to create an async validator:
validate: {
    isAsync: true
    validator: function(v, callback) {
    // Do the validation, when the result is ready, call the callback
    callback(isValid);
    }
}

# Other useful SchemaType properties:
- Strings: lowercase, uppercase, trim
- All types: get, set (to define a custom getter/setter)

price: {
    type: Number,
    get: v => Math.round(v),
    set: v => Math.round(v)
}

# Relations between documents in MongoDB/ Mongoose
we have 3 approachs depending on consistency vs. query performance as follows:

1) Using references (Normalization) -> consistency
// once we update a property in auther, it'll be updated all over the course documents that has it's ID
let auther = {
    name: 'ahmed'
}
let course = {
    auther: 'id'
}

2) Using embeded documents (Denormalizaiton) -> Performance
// Here, if we want to updated a propery in the auther, we have to update every course explicitly.
let course = {
    title: 'course 1',
    auther: {
        name: 'Ahmed'
    }
}

3) Hybrid

let author = {
    name: 'ahmed',
    // and much more properties
}
let course = {
    title: 'course 1',
    author: {
        id: 'ref' // it's schema name,
        name: 'ahmed' // the properites that may be changed in the future.
    }
}

# what is the meaning of population ?
when we made a refrence of one document in another one, once we need to get this document we'll get it'd id only, so we need to do some more work to explicitly get the child document as follows:
async function listCourses() {
    const courses = await Course
        .find()
        .populate('author) // this will bring back whole author document
        // we can include and exclude some properties from the child doc as follows instead of the upper:
        .populate('author', 'name -_id) // this will include name of author and exclude it's id
        // if we have more than one child docs, we could populate them as well
        .populate('category', 'name')
        .select('name author') // this will bring only those properites
}

// Validating ObjectIDs
mongoose.Types.ObjectID.isValid(id);
- To validate ObjectIDs using joi, use joi-objectid NPM package.